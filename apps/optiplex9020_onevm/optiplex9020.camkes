/*
 * Copyright 2016, Data 61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(D61_GPL)
 */

#include <autoconf.h>
#include <configurations/vm.h>
#include <string_reverse.h>

component Init0 {
    dataport Buf(STRING_REVERSE_BUFSIZE) dp1;
    dataport Buf(STRING_REVERSE_BUFSIZE) dp2;

    emits Ready ready;
    consumes Done done;

    has mutex cross_vm_event_mutex;

    uses Ethdriver ethdriver;

    VM_INIT_DEF()
}

import <StringReverse/StringReverse.camkes>;
import <UDPServer/UDPServer.camkes>;
import <HelloWorld/HelloWorld.camkes>;

component VM {
    composition {
        VM_COMPOSITION_DEF()
        VM_PER_VM_COMP_DEF(0)

        component StringReverse string_reverse;

        connection seL4SharedDataWithCaps cross_vm_conn(from string_reverse.src_dp,
                                                        to vm0.dp1);

        connection seL4SharedDataWithCaps cross_vm_large_conn(from string_reverse.dest_dp,
                                                              to vm0.dp2);

        connection seL4Notification ev2_conn(from vm0.ready,
                                             to string_reverse.ready);

        connection seL4Notification ev1_conn(from string_reverse.done,
                                             to vm0.done);

        connection seL4RPCCall cross_vm_putchar(from string_reverse.putchar,
                                                to serial.vm_putchar);
        /* Ethernet driver that we share to Linux */
        component Ethdriver ethdriver;
        component HWEthDriver HWEthdriver;
        /* Hardware resources for the ethernet driver */
        connection seL4HardwareMMIO ethdrivermmio(from ethdriver.EthDriver, to HWEthdriver.mmio);
        connection seL4HardwareInterrupt hwethirq(from HWEthdriver.irq, to ethdriver.irq);
        /* Connect vm0 ethernet to the ethdriver */
        connection seL4Ethdriver ethdriver_con(from vm0.ethdriver, to ethdriver.client);


        component Echo echo;
        component UDPServer udpserver0;
        component UDPServer udpserver1;
        connection seL4Ethdriver eth_driver0(from udpserver0.ethdriver, to ethdriver.client);
        connection seL4Ethdriver eth_driver1(from udpserver1.ethdriver, to ethdriver.client);
        connection seL4UDPRecv udp_echo_recv(from echo.echo_recv, to udpserver0.client_recv);
        connection seL4UDPSend udp_echo_send(from echo.echo_send, to udpserver0.client_send);
        connection seL4MultiSharedData udp_echo_send_buf(from echo.echo_send_buf, to udpserver0.client_send_buf);
        connection seL4MultiSharedData udp_echo_recv_buf(from echo.echo_recv_buf, to udpserver0.client_recv_buf);
        connection seL4GlobalAsynchCallback udp_echo_recv_ready(from udpserver0.client_recv_ready, to echo.echo_recv_ready);

        connection seL4UDPRecv udp_echo2_recv(from echo.echo2_recv, to udpserver1.client_recv);
        connection seL4UDPSend udp_echo2_send(from echo.echo2_send, to udpserver1.client_send);
        connection seL4MultiSharedData udp_echo2_send_buf(from echo.echo2_send_buf, to udpserver1.client_send_buf);
        connection seL4MultiSharedData udp_echo2_recv_buf(from echo.echo2_recv_buf, to udpserver1.client_recv_buf);
        connection seL4GlobalAsynchCallback udp_echo2_recv_ready(from udpserver1.client_recv_ready, to echo.echo2_recv_ready);

        /* Connect Echo to the timer server */
        connection seL4TimeServer echo_timer(from echo.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to echo.timer_complete);

        /* Connect Echo to the RTC */
        connection seL4RPCCall echo_rtc(from echo.rtc, to rtc.rtc);
    }
    configuration {
        VM_CONFIGURATION_DEF()
        VM_PER_VM_CONFIG_DEF(0, 2)
        vm0.simple_untyped28_pool = 5;
        vm0.simple_untyped27_pool = 5;
        vm0.simple_untyped26_pool = 5;
        vm0.heap_size = 0x10000;
        vm0.guest_ram_mb = 512;
        vm0.kernel_cmdline = VM_GUEST_CMDLINE;
        vm0.kernel_image = C162_KERNEL_IMAGE;
        vm0.kernel_relocs = C162_KERNEL_IMAGE;
        vm0.initrd_image = C162_ROOTFS;
        vm0.iospace_domain = 0x0f;
        vm0_config.pci_devices_iospace = 1;

        vm0.dp1_id = 1;
        vm0.dp1_size = STRING_REVERSE_BUFSIZE;

        vm0.dp2_id = 2;
        vm0.dp2_size = STRING_REVERSE_BUFSIZE;

        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.iospaces = "0x12:0x6:0x0:0"; // <------------ may be different (corresponds to below)
        ethdriver.iospace_id = 0x12;
        ethdriver.pci_bdf = "6:0.0"; // <------------ may be different
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.device_model = "82574";
        ethdriver.heap_size = 0x10000;
        ethdriver.dma_pool = 0x200000;

        HWEthdriver.mmio_paddr = 0xc0400000;
        HWEthdriver.mmio_size = 0x20000;
        HWEthdriver.irq_irq_type = "pci";
        HWEthdriver.irq_irq_ioapic = 0;
        HWEthdriver.irq_irq_ioapic_pin = 18;
        HWEthdriver.irq_irq_vector = 18;

        vm0.ethdriver_attributes = "1";
        vm0.ethdriver_global_endpoint = "vm0";
        vm0.ethdriver_badge = "134479872";
        vm0.ethdriver_mac = [06, 00, 00, 11, 12, 13];

        vm0_config.init_cons = [
            {"init":"make_virtio_net", "badge":134479872, "irq":"virtio_net_notify"},
        ];

        /* The attributes for the receive buffer represent the client ID
         * this needs to match the the 'echo_recv_attributes' to indicate that
         * the this is the buffer for that client */
        echo.echo_recv_buf_attributes = "1";
        echo.echo_recv_buf_shmem_size = 0x1000;

        /* attributes for echo receive RPC indicate a client ID. This needs
         * to be unique across all of the RPC connections to the udpserver0.client_recv */
        echo.echo_recv_attributes = "1";
        /* The UDP port that this interface will receive packets on */
        echo.echo_recv_port = 7;
        /* Provide a name for the endpoint used to notify when there are new packets
         * to poll for. This needs to be a valid C symbol, should match what is given
         * in 'echo_recv_ready_global_endpoint' and should otherwise be unqiue in the
         * whole system */
        echo.echo_recv_global_endpoint = "echo_recv_endpoint";
        echo.echo_recv_ready_global_endpoint = "echo_recv_endpoint";

        /* Set the port this UDP interface will send on over the network.
         * 'dest' is the port to send to, and 'source' is the 'return address'
         * or 'port of origin' that will be put into the packet */
        echo.echo_send_ports = { "source" : 7, "dest" : 7};
        /* Attributes for echo_send and echo_send_buf work exactly the same
         * as for echo_recv. In this case they are a different namespace as
         * recv and them also being 1 is purely coincidental and not required
         */
        echo.echo_send_attributes= "1";

        echo.echo_send_buf_attributes = "1";
        echo.echo_send_buf_shmem_size = 0x1000;

        echo.echo2_recv_buf_attributes = "2";
        echo.echo2_recv_buf_shmem_size = 0x1000;

        echo.echo2_recv_attributes = "2";
        echo.echo2_send_buf_shmem_size = 0x1000;

        echo.echo2_recv_port = 7;
        echo.echo2_recv_global_endpoint = "echo2_recv_endpoint";
        echo.echo2_recv_ready_global_endpoint = "echo2_recv_endpoint";

        echo.echo2_send_ports = { "source" : 7, "dest" : 7};
        echo.echo2_send_attributes= "2";

        echo.echo2_send_buf_attributes = "2";

        echo.timer_attributes = 5;
        echo.timer_global_endpoint = "echo_timer";
        echo.timer_complete_global_endpoint = "echo_timer";
        echo.heap_size = 0;

        udpserver0.num_client_recv_bufs = 8;
        udpserver0.udp_ip_addr = "192.168.0.2";
        udpserver0.multicast_addr = "0.0.0.0";
        udpserver0.ethdriver_attributes = "2";
        udpserver0.ethdriver_shmem_size = 0x1000;
        udpserver0.ethdriver_global_endpoint = "udpserver0_endpoint";
        udpserver0.ethdriver_mac = [06, 00, 00, 12, 13, 14];
        udpserver0.heap_size = 0;

        udpserver1.num_client_recv_bufs = 8;
        udpserver1.udp_ip_addr = "192.168.0.3";
        udpserver1.multicast_addr = "0.0.0.0";
        udpserver1.ethdriver_attributes = "3";
        udpserver1.ethdriver_shmem_size = 0x1000;
        udpserver1.ethdriver_global_endpoint = "udpserver1_endpoint";
        udpserver1.ethdriver_mac = [06, 00, 00, 13, 14, 15];
        udpserver1.heap_size = 0;

// enable the configuration below to turn on passthrough usb and ethernet
#if 1

        vm0_config.ioports = [
            {"start":0x3000, "end":0x3020, "pci_device":0, "name":"Ethernet5"},
            {"start":0x4088, "end":0x4088 + 8, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4094, "end":0x4094 + 4, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4080, "end":0x4080 + 8, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4060, "end":0x4060 + 32, "pci_device":0x1f, "name":"SATA"},
        ];

        vm0_config.pci_devices = [
        {
            "name":"USB2",
            "bus":0, "dev":0x1a, "fun":0,
            "irq":"USB2",
            "memory":[
                {"paddr":0xc0715000, "size":0x400, "page_bits":12},
            ],
        },
        {
            "name":"USB3",
            "bus":0, "dev":0x1d, "fun":0,
            "irq":"USB3",
            "memory":[
                {"paddr":0xc0714000, "size":0x400, "page_bits":12},
            ],
        },
          {
              "name":"Ethernet5",
              "bus":5, "dev":0, "fun":0,
              "irq":"Ethernet5",
              "memory":[
                  {"paddr":0xc0500000, "size":0x20000, "page_bits":12},
                  {"paddr":0xc0520000, "size":0x4000, "page_bits":12},
              ],
          },
          {
              "name":"SATA",
              "bus":0, "dev":0x1f, "fun":2,
              "irq":"SATA",
              "memory":[
                  {"paddr":0xc0713000, "size":0x800, "page_bits":12},
              ],
          },
        ];
        vm0_config.irqs = [
            {"name":"USB2", "source":0x10, "level_trig":1, "active_low":1, "dest":14},
            {"name":"USB3", "source":0x17, "level_trig":1, "active_low":1, "dest":15},
            {"name":"Ethernet5", "source":0x11, "level_trig":1, "active_low":1, "dest":10},
            {"name":"SATA", "source":19, "level_trig":1, "active_low":1, "dest":11},
        ];

#endif
    }
}
